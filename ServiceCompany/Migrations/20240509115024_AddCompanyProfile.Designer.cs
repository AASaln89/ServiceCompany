// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceCompany.DbStuff;

#nullable disable

namespace ServiceCompany.Migrations
{
    [DbContext(typeof(ServiceCompanyDbContext))]
    [Migration("20240509115024_AddCompanyProfile")]
    partial class AddCompanyProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlertUser", b =>
                {
                    b.Property<int>("NotifiedUsersId")
                        .HasColumnType("int");

                    b.Property<int>("SeenAlertsId")
                        .HasColumnType("int");

                    b.HasKey("NotifiedUsersId", "SeenAlertsId");

                    b.HasIndex("SeenAlertsId");

                    b.ToTable("AlertUser");
                });

            modelBuilder.Entity("CategoryEntityParameterEntity", b =>
                {
                    b.Property<int>("CategoryParametersId")
                        .HasColumnType("int");

                    b.Property<int>("ParameterCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("CategoryParametersId", "ParameterCategoriesId");

                    b.HasIndex("ParameterCategoriesId");

                    b.ToTable("CategoryEntityParameterEntity");
                });

            modelBuilder.Entity("ElementEntityMaterialEntity", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("ElementEntityMaterialEntity");
                });

            modelBuilder.Entity("ElementEntityParameterEntity", b =>
                {
                    b.Property<int>("ElementsId")
                        .HasColumnType("int");

                    b.Property<int>("ParametersId")
                        .HasColumnType("int");

                    b.HasKey("ElementsId", "ParametersId");

                    b.HasIndex("ParametersId");

                    b.ToTable("ElementEntityParameterEntity");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.BasePointEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BasePoints");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.DesignOptionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesignOptionId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("DesignOptions");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ElementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Angle")
                        .HasColumnType("float");

                    b.Property<string>("BaseLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ClassifierPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConstructionMaterial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignOptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Diameter")
                        .HasColumnType("float");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("ElementType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GridEntityId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<string>("IdInCatalog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Length")
                        .HasColumnType("float");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameInCatalog")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OnNavisworksView")
                        .HasColumnType("bit");

                    b.Property<double?>("Perimeter")
                        .HasColumnType("float");

                    b.Property<string>("PhaseCreated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhaseDemolished")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Radius")
                        .HasColumnType("float");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Square")
                        .HasColumnType("float");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.Property<string>("WBSPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Width")
                        .HasColumnType("float");

                    b.Property<string>("WorkSet")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("GridEntityId");

                    b.HasIndex("LevelId");

                    b.HasIndex("TypeId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParameterEntityId")
                        .HasColumnType("int");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ParameterEntityId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.GridEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("GridId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("LocationX")
                        .HasColumnType("float");

                    b.Property<double>("LocationY")
                        .HasColumnType("float");

                    b.Property<double>("LocationZ")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ElementTypeId");

                    b.ToTable("Grids");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.LevelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("ElementTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Elevation")
                        .HasColumnType("float");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ElementTypeId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.LocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<double>("Elevation")
                        .HasColumnType("float");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeatherStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.MaterialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Square")
                        .HasColumnType("float");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("GIUD")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.RevitCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RevitCategoryEntities");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.UserWorkSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("WorkSets");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ViewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnSheet")
                        .HasColumnType("bit");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewId")
                        .HasColumnType("int");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DocumentId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.Warning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.WarningElementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ElementId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarningId");

                    b.ToTable("WarningElements");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectsId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThumbsDown")
                        .HasColumnType("int");

                    b.Property<int?>("ThumbsUp")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("BankAccount")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinBalance")
                        .HasColumnType("float");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.MemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberRoles");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("MemberRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MemberRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("StatusId");

                    b.ToTable("UserTasks");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserTaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("ServiceCompanyChatService.DbStuff.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CommentMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("AlertUser", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.User", null)
                        .WithMany()
                        .HasForeignKey("NotifiedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceCompany.DbStuff.Models.Alert", null)
                        .WithMany()
                        .HasForeignKey("SeenAlertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryEntityParameterEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoryParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("ParameterCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElementEntityMaterialEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ElementEntity", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.MaterialEntity", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElementEntityParameterEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ElementEntity", null)
                        .WithMany()
                        .HasForeignKey("ElementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", null)
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Categories")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.DesignOptionEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("DesignOptions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ElementEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany("Elements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Elements")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.GridEntity", null)
                        .WithMany("Elements")
                        .HasForeignKey("GridEntityId");

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.LevelEntity", "Level")
                        .WithMany("Elements")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", "Type")
                        .WithMany("Elements")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");

                    b.Navigation("Level");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany("ElementTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("ElementTypes")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", null)
                        .WithMany("Types")
                        .HasForeignKey("ParameterEntityId");

                    b.Navigation("Category");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.GridEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Grids")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", "ElementType")
                        .WithMany("Grids")
                        .HasForeignKey("ElementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");

                    b.Navigation("ElementType");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.LevelEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Levels")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", "ElementType")
                        .WithMany("Levels")
                        .HasForeignKey("ElementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");

                    b.Navigation("ElementType");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.LocationEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Locations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.MaterialEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Materials")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Parameters")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.UserWorkSet", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("WorkSets")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ViewEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Views")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.Warning", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", "Document")
                        .WithMany("Warnings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.WarningElementEntity", b =>
                {
                    b.HasOne("ManagementCompany.DbStuff.ExternalEntities.Warning", "Warning")
                        .WithMany("FailureElements")
                        .HasForeignKey("WarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warning");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceCompany.DbStuff.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Alert", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.User", "Author")
                        .WithMany("CreatedAlerts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Article", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Company", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.CompanyProfile", "Profile")
                        .WithOne("Company")
                        .HasForeignKey("ServiceCompany.DbStuff.Models.Company", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("CompanyId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Project", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.User", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.Article", null)
                        .WithMany("Watchers")
                        .HasForeignKey("ArticleId");

                    b.HasOne("ServiceCompany.DbStuff.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServiceCompany.DbStuff.Models.UserProfile", "Profile")
                        .WithOne("User")
                        .HasForeignKey("ServiceCompany.DbStuff.Models.User", "Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("UserId");

                    b.HasOne("ServiceCompany.DbStuff.Models.MemberRole", "MemberRole")
                        .WithMany("Users")
                        .HasForeignKey("MemberRoleId");

                    b.Navigation("Company");

                    b.Navigation("MemberRole");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserTask", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.User", "Author")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServiceCompany.DbStuff.Models.User", "Executor")
                        .WithMany("ExecutedTasks")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ServiceCompany.DbStuff.Models.UserTaskStatus", "Status")
                        .WithMany("UserTasks")
                        .HasForeignKey("StatusId");

                    b.Navigation("Author");

                    b.Navigation("Executor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ServiceCompanyChatService.DbStuff.Models.Comment", b =>
                {
                    b.HasOne("ServiceCompany.DbStuff.Models.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.CategoryEntity", b =>
                {
                    b.Navigation("ElementTypes");

                    b.Navigation("Elements");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.DocumentEntity", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("DesignOptions");

                    b.Navigation("ElementTypes");

                    b.Navigation("Elements");

                    b.Navigation("Grids");

                    b.Navigation("Levels");

                    b.Navigation("Locations");

                    b.Navigation("Materials");

                    b.Navigation("Parameters");

                    b.Navigation("Views");

                    b.Navigation("Warnings");

                    b.Navigation("WorkSets");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ElementTypeEntity", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Grids");

                    b.Navigation("Levels");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.GridEntity", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.LevelEntity", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.ParameterEntity", b =>
                {
                    b.Navigation("Types");
                });

            modelBuilder.Entity("ManagementCompany.DbStuff.ExternalEntities.Warning", b =>
                {
                    b.Navigation("FailureElements");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Company", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.CompanyProfile", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.MemberRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.Project", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("CreatedAlerts");

                    b.Navigation("CreatedTasks");

                    b.Navigation("ExecutedTasks");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserProfile", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceCompany.DbStuff.Models.UserTaskStatus", b =>
                {
                    b.Navigation("UserTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
